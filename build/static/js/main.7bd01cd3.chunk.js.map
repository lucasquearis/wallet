{"version":3,"sources":["actions/index.js","components/FormInputs/FormButton.jsx","components/FormInputs/FormValue.jsx","components/FormInputs/FormDescription.jsx","components/FormInputs/FormCurrency.jsx","components/FormInputs/FormMethod.jsx","components/FormInputs/FormTag.jsx","components/Form.jsx","components/Table.jsx","pages/Wallet.jsx","pages/Login.jsx","pages/Home.jsx","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/store.js","index.js"],"names":["editForm","bool","id","type","editFormBoolean","idEdit","fetchAPI","state","dispatch","fetch","then","data","json","response","expenses","updateExpenses","exchangeRates","currencies","Object","keys","filter","moeda","walletAPISuccess","catch","error","walletAPIError","FormButton","this","props","editBoolean","handleClick","updateExpense","onClick","Component","connect","wallet","FormValue","valueInput","handleChange","htmlFor","data-testid","name","onChange","value","FormDescription","FormCurrency","map","index","key","FormMethod","item","FormTag","INITIAL_STATE","description","currency","method","tag","Form","bind","renderForm","editButton","fetchMoedas","editable","target","successApi","setState","prevState","edit","setBoolean","setEditable","objSelected","find","className","setColorForm","editExpense","Table","handleButtonEdit","del","cambio","ask","toFixed","valor","disabled","tableBody","task","Wallet","reduce","acc","cur","ZERO_EXPENSE","AT_LEAST_ONE_EXPENSE","calculateTransaction","email","length","React","user","Login","password","buttonDisable","checkEmail","checkPassword","test","setNewTaskToStore","to","checkLogin","Home","App","exact","path","Boolean","window","location","hostname","match","action","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7bd01cd3.chunk.js","sourcesContent":["// Coloque aqui suas actions\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const CURRENCIES = 'CURRENCIES';\nexport const GET_API = 'GET_API';\nexport const GET_API_SUCCESS = 'GET_API_SUCCESS';\nexport const GET_API_ERROR = 'GET_API_ERROR';\nexport const UPDATE_EXPENSES = 'UPDATE_EXPENSES';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_FORM = 'EDIT_FORM';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\n\nexport function userLogin(state) {\n  return {\n    type: LOGIN_USER,\n    email: state.email,\n    password: state.password,\n  };\n}\n\nexport function walletAction(state) {\n  return {\n    type: CURRENCIES,\n    currencies: state,\n  };\n}\n\nexport function walletAPI() {\n  return {\n    type: GET_API,\n  };\n}\nexport function walletAPISuccess(state) {\n  const moedas = Object.keys(state);\n  const moedasFilter = moedas.filter((moeda) => moeda !== 'USDT');\n  return {\n    type: GET_API_SUCCESS,\n    currencies: moedasFilter,\n  };\n}\nexport function walletAPIError(error) {\n  return {\n    type: GET_API_ERROR,\n    error,\n  };\n}\nexport function updateExpenses(state) {\n  return {\n    type: UPDATE_EXPENSES,\n    expenses: state,\n  };\n}\n\nexport function deleteExpenses(id) {\n  return {\n    type: DELETE_EXPENSE,\n    id,\n  };\n}\n\nexport function editForm(bool, id) {\n  return {\n    type: EDIT_FORM,\n    editFormBoolean: bool,\n    idEdit: id,\n  };\n}\n\nexport function editExpense(state) {\n  return {\n    type: EDIT_EXPENSE,\n    state,\n  };\n}\n\nexport const fetchAPI = (state) => (dispatch) => {\n  const URL_API = 'https://economia.awesomeapi.com.br/json/all';\n  fetch(URL_API)\n    .then((data) => data.json())\n    .then((response) => (state\n      ? dispatch(updateExpenses({ ...state, exchangeRates: response }))\n      : dispatch(walletAPISuccess(response))))\n    .catch((error) => dispatch(walletAPIError(error)));\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass FormButton extends Component {\n  render() {\n    const { editBoolean, handleClick, updateExpense } = this.props;\n    return (\n      <button\n        onClick={ editBoolean ? updateExpense : handleClick }\n        type=\"button\"\n      >\n        {editBoolean ? 'Editar despesa' : 'Adicionar despesas'}\n      </button>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  editBoolean: state.wallet.editFormBoolean,\n});\n\nFormButton.propTypes = {\n  state: PropTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps)(FormButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormValue extends Component {\n  render() {\n    const { valueInput, handleChange } = this.props;\n    return (\n      <label htmlFor=\"value\">\n        Valor:\n        <input\n          data-testid=\"value-input\"\n          name=\"value\"\n          onChange={ handleChange }\n          type=\"number\"\n          id=\"value\"\n          value={ valueInput }\n        />\n      </label>\n    );\n  }\n}\n\nFormValue.propTypes = {\n  valueInput: PropTypes.number,\n  handleChange: PropTypes.func,\n}.isRequired;\n\nexport default FormValue;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormDescription extends Component {\n  render() {\n    const { valueInput, handleChange } = this.props;\n    return (\n      <label htmlFor=\"description\">\n        Descrição:\n        <input\n          data-testid=\"description-input\"\n          name=\"description\"\n          onChange={ handleChange }\n          id=\"description\"\n          type=\"text\"\n          value={ valueInput }\n        />\n      </label>\n    );\n  }\n}\n\nFormDescription.propTypes = {\n  valueInput: PropTypes.string,\n  handleChange: PropTypes.func,\n}.isRequired;\n\nexport default FormDescription;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormCurrency extends Component {\n  render() {\n    const { valueInput, handleChange, value } = this.props;\n    return (\n      <label htmlFor=\"currency\">\n        Moeda:\n        <select\n          data-testid=\"currency-input\"\n          value={ value }\n          name=\"currency\"\n          onChange={ handleChange }\n          id=\"currency\"\n        >\n          {valueInput\n            .map((moeda, index) => <option key={ index }>{moeda}</option>)}\n        </select>\n      </label>\n    );\n  }\n}\n\nFormCurrency.propTypes = {\n  valueInput: PropTypes.string,\n  handleChange: PropTypes.func,\n}.isRequired;\n\nexport default FormCurrency;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormMethod extends Component {\n  render() {\n    const { handleChange, value } = this.props;\n    const pagamento = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n\n    return (\n      <label htmlFor=\"method\">\n        Método de pagamento\n        <select\n          data-testid=\"method-input\"\n          value={ value }\n          name=\"method\"\n          onChange={ handleChange }\n          id=\"method\"\n        >\n          {pagamento\n            .map((item, index) => <option key={ index }>{item}</option>)}\n        </select>\n      </label>\n    );\n  }\n}\n\nFormMethod.propTypes = {\n  valueInput: PropTypes.string,\n  handleChange: PropTypes.func,\n}.isRequired;\n\nexport default FormMethod;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormTag extends Component {\n  render() {\n    const { handleChange, value } = this.props;\n    const tag = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return (\n      <label htmlFor=\"tag\">\n        Tag\n        <select\n          data-testid=\"tag-input\"\n          value={ value }\n          name=\"tag\"\n          onChange={ handleChange }\n          id=\"tag\"\n        >\n          {tag.map((item, index) => <option key={ index }>{ item }</option>)}\n        </select>\n      </label>\n    );\n  }\n}\n\nFormTag.propTypes = {\n  valueInput: PropTypes.string,\n  handleChange: PropTypes.func,\n}.isRequired;\n\nexport default FormTag;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { fetchAPI, editExpense, editForm } from '../actions';\nimport FormButton from './FormInputs/FormButton';\nimport FormValue from './FormInputs/FormValue';\nimport FormDescription from './FormInputs/FormDescription';\nimport FormCurrency from './FormInputs/FormCurrency';\nimport FormMethod from './FormInputs/FormMethod';\nimport FormTag from './FormInputs/FormTag';\n\nconst INITIAL_STATE = {\n  value: 0,\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n};\nclass Form extends Component {\n  constructor() {\n    super();\n    this.state = INITIAL_STATE;\n    this.handleChange = this.handleChange.bind(this);\n    this.renderForm = this.renderForm.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.editButton = this.editButton.bind(this);\n    this.updateExpense = this.updateExpense.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchMoedas } = this.props;\n    fetchMoedas();\n  }\n\n  componentDidUpdate() {\n    const { editable } = this.props;\n    if (editable) {\n      this.editButton();\n    }\n  }\n\n  setColorForm() {\n    const { editFormBoolean } = this.props;\n    if (editFormBoolean) {\n      return 'fieldset-form-edit';\n    }\n    return 'fieldset-form';\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    const { successApi } = this.props;\n    this.setState((prevState) => ({\n      ...prevState,\n      [name]: value,\n      exchangeRates: successApi,\n    }));\n  }\n\n  handleClick() {\n    const { fetchMoedas } = this.props;\n    fetchMoedas(this.state);\n    this.setState(INITIAL_STATE);\n  }\n\n  updateExpense() {\n    const { edit, setBoolean, editFormBoolean } = this.props;\n    edit(this.state);\n    setBoolean(!editFormBoolean);\n    this.setState(INITIAL_STATE);\n  }\n\n  editButton() {\n    const { expenses, idEdit, setEditable } = this.props;\n    const objSelected = expenses.find((item) => item.id === idEdit);\n    const { value, description, currency, method, tag } = objSelected;\n    setEditable(false);\n    this.setState({\n      value,\n      description,\n      currency,\n      method,\n      tag,\n    });\n  }\n\n  renderForm() {\n    const { description, value, currency, method, tag } = this.state;\n    const { currencies } = this.props;\n    return (\n      <fieldset className={ this.setColorForm() }>\n        <FormValue\n          valueInput={ value }\n          handleChange={ this.handleChange }\n        />\n        <FormDescription\n          valueInput={ description }\n          handleChange={ this.handleChange }\n        />\n        <FormCurrency\n          valueInput={ currencies }\n          handleChange={ this.handleChange }\n          value={ currency }\n        />\n        <FormMethod\n          handleChange={ this.handleChange }\n          value={ method }\n        />\n        <FormTag\n          handleChange={ this.handleChange }\n          value={ tag }\n        />\n        <FormButton\n          handleClick={ this.handleClick }\n          editButton={ this.editButton }\n          updateExpense={ this.updateExpense }\n          state={ this.state }\n        />\n      </fieldset>\n    );\n  }\n\n  render() {\n    return (\n      this.renderForm()\n    );\n  }\n}\n\nForm.propTypes = {\n  isLoading: PropTypes.bool,\n  currencies: PropTypes.arrayOf(PropTypes.string),\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  successApi: state.wallet.successApi,\n  expenses: state.wallet.expenses,\n  idEdit: state.wallet.idEdit,\n  editFormBoolean: state.wallet.editFormBoolean,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchMoedas: (state) => dispatch(fetchAPI(state)),\n  edit: (state) => dispatch(editExpense(state)),\n  setBoolean: (state) => dispatch(editForm(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExpenses, editForm } from '../actions';\nimport Form from './Form';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.state = {\n      editable: false,\n    };\n    this.handleButtonEdit = this.handleButtonEdit.bind(this);\n    this.setEditable = this.setEditable.bind(this);\n  }\n\n  setEditable(bool) {\n    this.setState({\n      editable: bool,\n    });\n  }\n\n  handleButtonEdit(id) {\n    const { edit, editBoolean } = this.props;\n    this.setState({\n      editable: true,\n    });\n    edit(!editBoolean, id);\n  }\n\n  tableBody() {\n    const { expenses, del, editBoolean } = this.props;\n    return (\n      <tbody>\n        {expenses.map((item) => {\n          const { description, tag, method, value } = item;\n          const moeda = item.exchangeRates[item.currency].name;\n          const cambio = (+item.exchangeRates[item.currency].ask).toFixed(2);\n          const valor = ((item.value)\n          * (item.exchangeRates[item.currency].ask)).toFixed(2);\n          return (\n            <tr key={ item.id }>\n              <td>{description}</td>\n              <td>{tag}</td>\n              <td>{method}</td>\n              <td>{value}</td>\n              <td>{moeda}</td>\n              <td>{cambio}</td>\n              <td>{valor}</td>\n              <td>Real</td>\n              <td>\n                <button\n                  data-testid=\"delete-btn\"\n                  type=\"button\"\n                  onClick={ () => del(item.id) }\n                  disabled={ editBoolean }\n                >\n                  Excluir\n                </button>\n                <button\n                  data-testid=\"edit-btn\"\n                  type=\"button\"\n                  disabled={ editBoolean }\n                  onClick={ () => this.handleButtonEdit(item.id) }\n                >\n                  Editar\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    const { successApi } = this.props;\n    this.setState((prevState) => ({\n      ...prevState,\n      [name]: value,\n      exchangeRates: successApi,\n    }));\n  }\n\n  render() {\n    const { editable } = this.state;\n    return (\n      <div>\n        <Form editable={ editable } setEditable={ this.setEditable } />\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          {this.tableBody()}\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  editBoolean: state.wallet.editFormBoolean,\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  del: (task) => dispatch(deleteExpenses(task)),\n  edit: (task, id) => dispatch(editForm(task, id)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.array,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  calculateTransaction() {\n    const { expenses } = this.props;\n    const mapTransations = expenses\n      .map((item) => (item.exchangeRates[item.currency].ask) * item.value);\n    const total = mapTransations.reduce((acc, cur) => acc + cur, 0);\n    return total;\n  }\n\n  render() {\n    const ZERO_EXPENSE = <p data-testid=\"total-field\">{ `Despesa total: ${0}` }</p>;\n    const AT_LEAST_ONE_EXPENSE = (\n      <p data-testid=\"total-field\">\n        {`Despesa total: ${this.calculateTransaction()\n          .toFixed(2)}`}\n      </p>\n    );\n    this.calculateTransaction();\n    const { email, expenses } = this.props;\n    return (\n      <main className=\"main-container\">\n        <header className=\"header-main\">\n          <div className=\"div-info-header\">\n            <p>Email: </p>\n            <p data-testid=\"email-field\">{ email }</p>\n          </div>\n          <div className=\"div-info-header\">\n            {\n              expenses.length > 0\n                ? AT_LEAST_ONE_EXPENSE\n                : ZERO_EXPENSE\n            }\n          </div>\n          <div className=\"div-info-header\">\n            <p data-testid=\"header-currency-field\">Moeda Atual: BRL</p>\n          </div>\n        </header>\n        <Table />\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nWallet.propTypes = {\n  email: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps, null)(Wallet);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { userLogin } from '../actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  buttonEnable() {\n    this.setState({ buttonDisable: false });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState((state) => ({\n      ...state,\n      [name]: value,\n    }));\n  }\n\n  checkLogin() {\n    return this.checkEmail() && this.checkPassword();\n  }\n\n  checkEmail() {\n    const { email } = this.state;\n    const regex = /^[a-z0-9_.-]+@[a-z]+\\.[a-z]{2,3}(?:\\.[a-z]{2})?$/;\n    return regex.test(email);\n  }\n\n  checkPassword() {\n    const { password } = this.state;\n    const maxCaracters = 6;\n    return password.length >= maxCaracters;\n  }\n\n  handleClick() {\n    const { email, password } = this.state;\n    const { setNewTaskToStore } = this.props;\n    setNewTaskToStore({ email, password });\n  }\n\n  render() {\n    const { email, password } = this.state;\n    return (\n      <div className=\"div-login\">\n        <fieldset className=\"fieldset-login\">\n          <label htmlFor=\"email-input\">\n            Email:\n            <input\n              name=\"email\"\n              data-testid=\"email-input\"\n              onChange={ this.handleChange }\n              value={ email }\n            />\n          </label>\n          <label htmlFor=\"password-input\">\n            Senha:\n            <input\n              name=\"password\"\n              type=\"password\"\n              data-testid=\"password-input\"\n              onChange={ this.handleChange }\n              value={ password }\n            />\n          </label>\n          <Link to=\"/wallet/carteira\">\n            <button\n              type=\"button\"\n              disabled={ !this.checkLogin() }\n              onClick={ this.handleClick }\n            >\n              Entrar\n            </button>\n          </Link>\n        </fieldset>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  password: state.user.password,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNewTaskToStore: (task) => dispatch(userLogin(task)),\n});\n\nLogin.propTypes = {\n  setNewTaskToStore: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport Login from './Login';\n\nclass Home extends React.Component {\n  render() {\n    return <Login />;\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Wallet from './pages/Wallet';\nimport Home from './pages/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route\n          exact\n          path=\"/wallet\"\n        >\n          <Home />\n        </Route>\n        <Route\n          exact\n          path=\"/wallet/carteira\"\n        >\n          <Wallet />\n        </Route>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN_USER } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN_USER:\n    return {\n      ...state,\n      email: action.email,\n      password: action.password,\n    };\n  default:\n    return { ...state };\n  }\n}\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  DELETE_EXPENSE,\n  EDIT_FORM,\n  GET_API,\n  GET_API_ERROR,\n  GET_API_SUCCESS,\n  UPDATE_EXPENSES,\n  EDIT_EXPENSE,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  error: null,\n  idEdit: 0,\n  editFormBoolean: false,\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_API:\n    return {\n      ...state,\n    };\n  case GET_API_SUCCESS:\n    return {\n      ...state,\n      currencies: action.currencies,\n      successApi: action.successApi,\n    };\n  case GET_API_ERROR:\n    return {\n      ...state,\n      error: state.error,\n    };\n  case UPDATE_EXPENSES:\n    return {\n      ...state,\n      expenses: [...state.expenses, { id: state.expenses.length, ...action.expenses }],\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses.filter((item) => action.id !== item.id)],\n    };\n  case EDIT_FORM:\n    return {\n      ...state,\n      editFormBoolean: action.editFormBoolean,\n      idEdit: action.idEdit,\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.map((item) => {\n        if (state.idEdit === item.id) {\n          return ({ ...item, ...action.state, exchangeRates: item.exchangeRates });\n        }\n        return item;\n      }),\n    };\n  default:\n    return { ...state };\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst reducer = combineReducers({ user, wallet });\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}